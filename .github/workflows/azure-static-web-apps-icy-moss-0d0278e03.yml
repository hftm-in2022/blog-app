name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: ['main', 'dev', 'feature/*', 'chore-ng-update-*']
  workflow_dispatch:

jobs:
  codeQL:
    uses: hftm-in2022/blog-app/.github/workflows/codeql.yml@main

  build:
    needs: codeQL
    runs-on: ubuntu-latest
    name: Build Job
    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
    - name: npm install, build, and test
      run: |
          npm ci
          npm run build --if-present
          npm run test:ci --if-present

    - name: Upload HTML Test Report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: reports/test-summary

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: reports/coverage

  deploy:
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    name: Deploy Job
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
      - name: Deploy
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ICY_MOSS_0D0278E03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/" # App source code path
          api_location: "" # Api source code path - optional
          output_location: "dist/blog-app/browser" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######

      - name: Determine Version
        run: |
          # Get the last tag or default to 0.0.0
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Last tag: $LAST_TAG"

          # Extract the major, minor, and patch versions
          MAJOR=$(echo $LAST_TAG | awk -F. '{print $1}' | sed 's/v//')
          MINOR=$(echo $LAST_TAG | awk -F. '{print $2}')
          PATCH=$(echo $LAST_TAG | awk -F. '{print $3}')

          # Get commits since the last tag
          COMMITS=$(git log --pretty=format:"%s" "$LAST_TAG"..HEAD || echo "")
          echo "Commits: $COMMITS"

          # Determine the version bump
          VERSION_BUMP="patch"
          for COMMIT in $COMMITS; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              VERSION_BUMP="major"
              break
            elif [[ "$COMMIT" == *"fix"* ]]; then
              VERSION_BUMP="minor"
            fi
          done

          # Increment version
          if [[ "$VERSION_BUMP" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$VERSION_BUMP" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          # Export the version
          echo "version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          echo "Creating tag: ${version}"
          git tag ${version}
          git push origin ${version}
        env:
          version: ${{ env.version }}

