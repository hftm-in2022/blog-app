name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: ['main', 'dev', 'feature/*', 'chore-ng-update-*']
  workflow_dispatch:

jobs:
  codeQL:
    uses: hftm-in2022/blog-app/.github/workflows/codeql.yml@main

  build:
    needs: codeQL
    runs-on: ubuntu-latest
    name: Build Job
    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Wichtig für die Versionierung

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install and Build
      run: |
        npm ci
        npm run build --if-present
        npm run test:ci --if-present

    - name: Upload HTML Test Report
      uses: actions/upload-artifact@v4  # Aktualisiert auf v4
      if: always()  # Läuft auch bei Fehlern
      with:
        name: test-report
        path: reports/test-summary
        retention-days: 14  # Begrenzt die Aufbewahrungszeit

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4  # Aktualisiert auf v4
      if: always()  # Läuft auch bei Fehlern
      with:
        name: coverage-report
        path: reports/coverage
        retention-days: 14  # Begrenzt die Aufbewahrungszeit

  deploy:
    needs: build
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    name: Deploy Job
    permissions:
      contents: write  # Explizite Berechtigung für Git-Operationen

    steps:
      - uses: actions/checkout@v4  # Aktualisiert auf v4
        with:
          submodules: true
          fetch-depth: 0  # Wichtig für die Versionierung

      - name: Deploy to Azure
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ICY_MOSS_0D0278E03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: ""
          output_location: "dist/blog-app/browser"

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine Version
        id: version
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          MAJOR=$(echo $LAST_TAG | awk -F. '{print $1}' | sed 's/v//')
          MINOR=$(echo $LAST_TAG | awk -F. '{print $2}')
          PATCH=$(echo $LAST_TAG | awk -F. '{print $3}')

          COMMITS=$(git log --pretty=format:"%s" "$LAST_TAG"..HEAD)

          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMITS" | grep -q "feat"; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update Version in Files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          # Update package.json
          if [ -f "package.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"${VERSION#v}\"/" package.json
          fi
          # Update index.html
          if [ -f "src/index.html" ]; then
            sed -i "s/<meta name=\"version\" content=\".*\"/<meta name=\"version\" content=\"$VERSION\"/" src/index.html
          fi

      - name: Commit and Tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ -n "$(git status --porcelain)" ]]; then
            git add package.json src/index.html
            git commit -m "chore: update version to $VERSION [skip ci]"
            git push
          fi
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
